[tool.poetry]
name = "openfisca_extension_template"
version = "1.3.10"
description = "An extension adding new variables to a country package."
license = "AGPL-3.0-only"
authors = ["OpenFisca Team <contact@openfisca.org>"]
maintainers = ["OpenFisca Team <contact@openfisca.org>"]
readme = "README.md"
homepage = "https://openfisca.org"
repository = "https://github.com/openfisca/extension-template"
documentation = "https://openfisca.org/doc"
keywords = ["microsimulation", "tax", "benefit", "rac", "rules-as-code"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: GNU Affero General Public License v3",
    "Operating System :: POSIX",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Topic :: Scientific/Engineering :: Information Analysis",
    ]
packages = [{include = "openfisca_extension_template", from = "src"}]

[tool.poetry.dependencies]
python = "~3.7.2 || ~3.8 || ~3.9"
openfisca_country_template = "^3.8.0"
pyyaml = "^6.0"
autopep8 = {version = "^1.5.0", optional = true}
darglint = {version ="^1.8.0", optional = true}
flake8 = {version = "^3.9.0", optional = true}
flake8-bugbear = {version = "^22.10.0", optional = true}
flake8-builtins = {version = "2.0.0", optional = true}
flake8-coding = {version = "^1.3.0", optional = true}
flake8-commas = {version = "^2.1.0", optional = true}
flake8-comprehensions = {version = "^3.10.0", optional = true}
flake8-docstrings = {version ="^1.6.0", optional = true}
flake8-print = {version = "^5.0.0", optional = true}
flake8-rst-docstrings = {version ="^0.2.0", optional = true}
flake8-simplify = {version = "^0.19.0", optional = true}
flake8-use-fstring = {version = "^1.4.0", optional = true}
importlib-metadata = {version = "^4.13.0", python = "~3.7", optional = true}
isort = {version = "^5.10.0", optional = true}
mypy = {version = "^0.990", optional = true}
openfisca-core = {extras = ["web-api"], version = "^35.9.0", optional = true}
pycodestyle = {version = "^2.7.0", optional = true}
pylint = {version = "^2.15.0", optional = true}
pyupgrade = {version = "^3.2.0", optional = true}

[tool.poetry.extras]
dev = [
    "autopep8",
    "darglint",
    "flake8",
    "flake8-bugbear",
    "flake8-builtins",
    "flake8-coding",
    "flake8-commas",
    "flake8-comprehensions",
    "flake8-docstrings",
    "flake8-print",
    "flake8-rst-docstrings",
    "flake8-simplify",
    "flake8-use-fstring",
    "importlib-metadata",
    "isort",
    "mypy",
    "openfisca-core",
    "pycodestyle",
    "pylint",
    "pyupgrade",
    ]

[tool.autopep8]
aggressive = 3
hang-closing = true
ignore = [
    "D101", # Variables already provide label/description
    "D107", # We do not document __init__ method
    "D401", # We do not require the imperative mood
    "E128", # We prefer hang-closing visual indents
    "E251", # We prefer `function(x = 1)` over `function(x=1)`
    "W503", # We break lines before binary operators (Knuth's style)
    ]
in-place = true
recursive = true
no-accept-encodings = true
strictness = "short"

[tool.isort]
case_sensitive = true
force_alphabetical_sort_within_sections = false
group_by_package = true
include_trailing_comma = true
known_first_party = ["openfisca_extension_template"]
known_2nd_party = ["openfisca_country_template"]
known_typing = ["mypy", "mypy_extensions"]
multi_line_output = 8
py_version = 37
sections = [
    "FUTURE",
    "TYPING",
    "STDLIB",
    "THIRDPARTY",
    "2ND_PARTY",
    "FIRSTPARTY",
    "LOCALFOLDER",
    ]

[tool.pylint."MASTER"]
load-plugins = ["pylint.extensions.no_self_use"]

[tool.pylint."STRING"]
check-quote-consistency = true
check-str-concat-over-line-jumps = true

[tool.pylint."MESSAGE CONTROL"]
disable = [
    "C0103", # We snake case variables and reforms
    "C0115", # We already labelise variables
    "E1101", # False positive, as members are defined dynamically,
    "R6301"
    ]
score = "no"

[tool.mypy]
ignore_missing_imports = true
install_types = true
non_interactive = true
strict = false

[tool.pytest.ini_options]
addopts = [
    "--disable-pytest-warnings",
    "--exitfirst",
    "--quiet",
    "--showlocals",
    "--tb=long",
    ]

[build-system]
requires = ["poetry-core >= 1.2.0"]
build-backend = "poetry.core.masonry.api"
