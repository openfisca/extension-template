[tool.poetry]
name = "openfisca_extension_template"
version = "1.3.11"
description = "An extension adding new variables to a country package."
license = "AGPL-3.0-only"
authors = ["OpenFisca Team <contact@openfisca.org>"]
maintainers = ["OpenFisca Team <contact@openfisca.org>"]
readme = "README.md"
homepage = "https://openfisca.org"
repository = "https://github.com/openfisca/extension-template"
documentation = "https://openfisca.org/doc"
keywords = ["microsimulation", "tax", "benefit", "rac", "rules-as-code"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: GNU Affero General Public License v3",
    "Operating System :: POSIX",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Topic :: Scientific/Engineering :: Information Analysis",
    ]
packages = [{include = "openfisca_extension_template", from = "."}]

[tool.poetry.dependencies]
python = "~3.7.9 || ~3.8.10 || ~3.9.13"
openfisca_country_template = "^5.0.0"

[tool.poetry.group.dev.dependencies]
autopep8 = "^1.5.0"
darglint = "^1.8.0"
flake8 = "^4.0.0"
flake8-bugbear = "^22.10.0"
flake8-builtins = "^2.0.0"
flake8-coding = "^1.3.0"
flake8-commas = "^2.1.0"
flake8-comprehensions = "^3.10.0"
flake8-docstrings = "^1.6.0"
flake8-print = "^5.0.0"
flake8-rst-docstrings = "^0.2.0"
flake8-simplify = "^0.19.0"
flake8-use-fstring = "^1.4.0"
importlib-metadata = {version = "<4.13.0", python = "~3.7.9"}
mypy = "^0.990"
openfisca-core = {extras = ["web-api"], version = "^38.0.0"}
pycodestyle = "^2.7.0"
pylint = "^2.15.0"
pytest-sugar = "^0.9.0"

[tool.poetry.group.build]
optional = true

[tool.poetry.group.build.dependencies]
build = "*"
twine = "*"

[tool.autopep8]
aggressive = 3
hang-closing = true
ignore = [
    "D101", # Variables already provide label/description
    "D107", # We do not document __init__ method
    "D401", # We do not require the imperative mood
    "E128", # We prefer hang-closing visual indents
    "E251", # We prefer `function(x = 1)` over `function(x=1)`
    "W503", # We break lines before binary operators (Knuth's style)
    ]
in-place = true
recursive = true
no-accept-encodings = true
strictness = "short"

[tool.pylint."MASTER"]
load-plugins = ["pylint.extensions.no_self_use"]

[tool.pylint."STRING"]
check-quote-consistency = true
check-str-concat-over-line-jumps = true

[tool.pylint."MESSAGE CONTROL"]
disable = [
    "C0103", # We snake case variables and reforms
    "C0115", # We already labelise variables
    "E0213", # We don't use self in formulas
    "E1101", # False positive, as members are defined dynamically,
    "R6301"
    ]
score = "no"

[tool.mypy]
ignore_missing_imports = true
install_types = true
non_interactive = true
strict = false

[tool.pytest.ini_options]
addopts = [
    "--disable-pytest-warnings",
    "--exitfirst",
    "--quiet",
    "--showlocals",
    "--tb=long",
    ]

[build-system]
requires = ["poetry-core >= 1.2.0"]
build-backend = "poetry.core.masonry.api"
